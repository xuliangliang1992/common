apply plugin: 'com.android.library'

android {
    compileSdkVersion compile_sdk_version.toInteger()
    buildToolsVersion build_tools_version

    defaultConfig {
        minSdkVersion min_sdk_version.toInteger()
        targetSdkVersion target_sdk_version.toInteger()
        versionCode version_code.toInteger()
        versionName version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters "armeabi", "armeabi-v7a", "x86"
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", LOG_DEBUG
            minifyEnabled MINIFY_ENABLED.toBoolean()
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", LOG_RELEASE
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding = true
    }

    compileOptions {
        sourceCompatibility = jdk_version
        targetCompatibility = jdk_version
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api "androidx.appcompat:appcompat:$androidxLibraryVersion"
    annotationProcessor "androidx.annotation:annotation:$androidxAnnotationVersion"
    api "com.google.android.material:material:$materialVersion"
    api "androidx.constraintlayout:constraintlayout:$constraintVersion"
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test:runner:$runnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"

    api "androidx.lifecycle:lifecycle-livedata-ktx:$livedataVersion"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$viewmodelVersion"

    api "io.reactivex.rxjava2:rxjava:$rxjavaVersion"
    api "io.reactivex.rxjava2:rxandroid:$rxandroidVersion"
    api "com.jakewharton.rxbinding3:rxbinding:$rxbindingVersion"

    api "com.squareup.retrofit2:retrofit:$retrofitVersion"
    api "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    api "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    api "com.squareup.okhttp3:logging-interceptor:$loggingInterceptorVersion"

    api 'com.umeng.umsdk:analytics:7.5.4'
    api 'com.umeng.umsdk:common:1.5.4'

    api "com.alibaba:arouter-api:$arouterApiVersion"
    annotationProcessor "com.alibaba:arouter-compiler:$arouterCompilerVersion"

    api "com.github.bumptech.glide:glide:$glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"

    // add for room
    api "androidx.room:room-runtime:$roomVersion"
    // room 配合 RxJava
    api "androidx.room:room-rxjava2:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"

    api 'com.yanzhenjie.recyclerview:support:1.3.2'

    api "org.greenrobot:eventbus:$eventbusVersion"

    api 'com.github.tbruyelle:rxpermissions:0.10.2'

    api "com.github.VictorAlbertos.RxCache:runtime:1.8.3-2.x"
    api 'com.github.VictorAlbertos.Jolyglot:gson:0.0.4'

    api "com.jakewharton.timber:timber:$timberVersion"

    // 基础依赖包，必须要依赖
    api "com.gyf.immersionbar:immersionbar:$immersionbar"
    // fragment快速实现（可选）
    api "com.gyf.immersionbar:immersionbar-components:$immersionbar"

    // 屏幕适配
    api 'me.jessyan:autosize:1.2.1'

    api 'cn.jiguang.sdk:jpush:3.7.0'  // 此处以JPush 3.7.0 版本为例。
    api 'cn.jiguang.sdk:jcore:2.4.2'  // 此处以JCore 2.4.2 版本为例。
}
